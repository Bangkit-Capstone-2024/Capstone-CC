// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  username          String
  password          String
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  isVerified        Boolean  @default(false)
  isDeleted         Boolean  @default(false)

  tenants           Tenants[]
  bookings          Booking[] 
}

model TokenBlacklist {
  id                Int      @id @default(autoincrement())
  token             String   @unique @db.VarChar(512)
  created_at        DateTime @default(now())
}

model Tenants {
  id              Int      @id @default(autoincrement())
  user_id         Int
  name_tenants    String
  address_tenants String
  location_lat    Float
  location_lng    Float
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  user            Users     @relation(fields: [user_id], references: [id])
  products        Product[]


  @@index([user_id])
}

model Category {
  id              Int       @id @default(autoincrement())
  name_categories String
  created_at      DateTime  @default(now())

  products        Product[]
}

model Product {
  id             Int       @id @default(autoincrement())
  name_products  String    @db.VarChar(225)
  slug           String    @unique
  pictures       String    @db.VarChar(512)
  description    String
  price          Float
  stock          Int
  is_available   Boolean   @default(true)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  category_id    Int
  tenant_id      Int
  address_tenants String

  category       Category  @relation(fields: [category_id], references: [id])
  tenant         Tenants    @relation(fields: [tenant_id], references: [id])
  bookings       Booking[]


  @@index([category_id])
  @@index([tenant_id])
}

model Booking {
  id          Int      @id @default(autoincrement())
  startDate   DateTime
  endDate     DateTime
  totalPrice  Float
  user_id      Int
  product_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        Users     @relation(fields: [user_id], references: [id])
  product     Product  @relation(fields: [product_id], references: [id])
}
